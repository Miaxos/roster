<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1014" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="997.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="997.00"> </text><svg id="frames" x="10" width="1180" total_samples="124"><g><title>[anon] (2 samples, 1.61%)</title><rect x="0.0000%" y="933" width="1.6129%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="943.50"></text></g><g><title>malloc$plt (2 samples, 1.61%)</title><rect x="0.0000%" y="917" width="1.6129%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2"/><text x="0.2500%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.81%)</title><rect x="1.6129%" y="933" width="0.8065%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="1"/><text x="1.8629%" y="943.50"></text></g><g><title>free$plt (1 samples, 0.81%)</title><rect x="1.6129%" y="917" width="0.8065%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1"/><text x="1.8629%" y="927.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (2 samples, 1.61%)</title><rect x="2.4194%" y="917" width="1.6129%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="2"/><text x="2.6694%" y="927.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (4 samples, 3.23%)</title><rect x="2.4194%" y="933" width="3.2258%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="4"/><text x="2.6694%" y="943.50">all..</text></g><g><title>alloc::str::convert_while_ascii (2 samples, 1.61%)</title><rect x="4.0323%" y="917" width="1.6129%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="2"/><text x="4.2823%" y="927.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 1.61%)</title><rect x="4.0323%" y="901" width="1.6129%" height="15" fill="rgb(228,23,34)" fg:x="5" fg:w="2"/><text x="4.2823%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 1.61%)</title><rect x="4.0323%" y="885" width="1.6129%" height="15" fill="rgb(218,30,26)" fg:x="5" fg:w="2"/><text x="4.2823%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 1.61%)</title><rect x="4.0323%" y="869" width="1.6129%" height="15" fill="rgb(220,122,19)" fg:x="5" fg:w="2"/><text x="4.2823%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 1.61%)</title><rect x="4.0323%" y="853" width="1.6129%" height="15" fill="rgb(250,228,42)" fg:x="5" fg:w="2"/><text x="4.2823%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 1.61%)</title><rect x="4.0323%" y="837" width="1.6129%" height="15" fill="rgb(240,193,28)" fg:x="5" fg:w="2"/><text x="4.2823%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 1.61%)</title><rect x="4.0323%" y="821" width="1.6129%" height="15" fill="rgb(216,20,37)" fg:x="5" fg:w="2"/><text x="4.2823%" y="831.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 1.61%)</title><rect x="4.0323%" y="805" width="1.6129%" height="15" fill="rgb(206,188,39)" fg:x="5" fg:w="2"/><text x="4.2823%" y="815.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (2 samples, 1.61%)</title><rect x="4.0323%" y="789" width="1.6129%" height="15" fill="rgb(217,207,13)" fg:x="5" fg:w="2"/><text x="4.2823%" y="799.50"></text></g><g><title>alloc::str::convert_while_ascii (2 samples, 1.61%)</title><rect x="4.0323%" y="773" width="1.6129%" height="15" fill="rgb(231,73,38)" fg:x="5" fg:w="2"/><text x="4.2823%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 1.61%)</title><rect x="4.0323%" y="757" width="1.6129%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="2"/><text x="4.2823%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 1.61%)</title><rect x="4.0323%" y="741" width="1.6129%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="2"/><text x="4.2823%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 1.61%)</title><rect x="4.0323%" y="725" width="1.6129%" height="15" fill="rgb(221,200,47)" fg:x="5" fg:w="2"/><text x="4.2823%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 1.61%)</title><rect x="4.0323%" y="709" width="1.6129%" height="15" fill="rgb(226,26,5)" fg:x="5" fg:w="2"/><text x="4.2823%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 1.61%)</title><rect x="4.0323%" y="693" width="1.6129%" height="15" fill="rgb(249,33,26)" fg:x="5" fg:w="2"/><text x="4.2823%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 1.61%)</title><rect x="4.0323%" y="677" width="1.6129%" height="15" fill="rgb(235,183,28)" fg:x="5" fg:w="2"/><text x="4.2823%" y="687.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 1.61%)</title><rect x="4.0323%" y="661" width="1.6129%" height="15" fill="rgb(221,5,38)" fg:x="5" fg:w="2"/><text x="4.2823%" y="671.50"></text></g><g><title>malloc (2 samples, 1.61%)</title><rect x="4.0323%" y="645" width="1.6129%" height="15" fill="rgb(247,18,42)" fg:x="5" fg:w="2"/><text x="4.2823%" y="655.50"></text></g><g><title>bytes::bytes::Bytes::copy_from_slice (1 samples, 0.81%)</title><rect x="5.6452%" y="933" width="0.8065%" height="15" fill="rgb(241,131,45)" fg:x="7" fg:w="1"/><text x="5.8952%" y="943.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.81%)</title><rect x="5.6452%" y="917" width="0.8065%" height="15" fill="rgb(249,31,29)" fg:x="7" fg:w="1"/><text x="5.8952%" y="927.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.81%)</title><rect x="5.6452%" y="901" width="0.8065%" height="15" fill="rgb(225,111,53)" fg:x="7" fg:w="1"/><text x="5.8952%" y="911.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.81%)</title><rect x="5.6452%" y="885" width="0.8065%" height="15" fill="rgb(238,160,17)" fg:x="7" fg:w="1"/><text x="5.8952%" y="895.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.81%)</title><rect x="5.6452%" y="869" width="0.8065%" height="15" fill="rgb(214,148,48)" fg:x="7" fg:w="1"/><text x="5.8952%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.81%)</title><rect x="5.6452%" y="853" width="0.8065%" height="15" fill="rgb(232,36,49)" fg:x="7" fg:w="1"/><text x="5.8952%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.81%)</title><rect x="5.6452%" y="837" width="0.8065%" height="15" fill="rgb(209,103,24)" fg:x="7" fg:w="1"/><text x="5.8952%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.81%)</title><rect x="5.6452%" y="821" width="0.8065%" height="15" fill="rgb(229,88,8)" fg:x="7" fg:w="1"/><text x="5.8952%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.81%)</title><rect x="5.6452%" y="805" width="0.8065%" height="15" fill="rgb(213,181,19)" fg:x="7" fg:w="1"/><text x="5.8952%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.81%)</title><rect x="5.6452%" y="789" width="0.8065%" height="15" fill="rgb(254,191,54)" fg:x="7" fg:w="1"/><text x="5.8952%" y="799.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.81%)</title><rect x="5.6452%" y="773" width="0.8065%" height="15" fill="rgb(241,83,37)" fg:x="7" fg:w="1"/><text x="5.8952%" y="783.50"></text></g><g><title>bytes::bytes::Bytes::copy_from_slice (1 samples, 0.81%)</title><rect x="5.6452%" y="757" width="0.8065%" height="15" fill="rgb(233,36,39)" fg:x="7" fg:w="1"/><text x="5.8952%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.81%)</title><rect x="5.6452%" y="741" width="0.8065%" height="15" fill="rgb(226,3,54)" fg:x="7" fg:w="1"/><text x="5.8952%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.81%)</title><rect x="5.6452%" y="725" width="0.8065%" height="15" fill="rgb(245,192,40)" fg:x="7" fg:w="1"/><text x="5.8952%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.81%)</title><rect x="5.6452%" y="709" width="0.8065%" height="15" fill="rgb(238,167,29)" fg:x="7" fg:w="1"/><text x="5.8952%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.81%)</title><rect x="5.6452%" y="693" width="0.8065%" height="15" fill="rgb(232,182,51)" fg:x="7" fg:w="1"/><text x="5.8952%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.81%)</title><rect x="5.6452%" y="677" width="0.8065%" height="15" fill="rgb(231,60,39)" fg:x="7" fg:w="1"/><text x="5.8952%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.81%)</title><rect x="5.6452%" y="661" width="0.8065%" height="15" fill="rgb(208,69,12)" fg:x="7" fg:w="1"/><text x="5.8952%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.81%)</title><rect x="5.6452%" y="645" width="0.8065%" height="15" fill="rgb(235,93,37)" fg:x="7" fg:w="1"/><text x="5.8952%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.81%)</title><rect x="5.6452%" y="629" width="0.8065%" height="15" fill="rgb(213,116,39)" fg:x="7" fg:w="1"/><text x="5.8952%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.81%)</title><rect x="5.6452%" y="613" width="0.8065%" height="15" fill="rgb(222,207,29)" fg:x="7" fg:w="1"/><text x="5.8952%" y="623.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.81%)</title><rect x="5.6452%" y="597" width="0.8065%" height="15" fill="rgb(206,96,30)" fg:x="7" fg:w="1"/><text x="5.8952%" y="607.50"></text></g><g><title>malloc (1 samples, 0.81%)</title><rect x="5.6452%" y="581" width="0.8065%" height="15" fill="rgb(218,138,4)" fg:x="7" fg:w="1"/><text x="5.8952%" y="591.50"></text></g><g><title>[libc.so.6] (1 samples, 0.81%)</title><rect x="5.6452%" y="565" width="0.8065%" height="15" fill="rgb(250,191,14)" fg:x="7" fg:w="1"/><text x="5.8952%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;monoio::driver::Inner&gt; (1 samples, 0.81%)</title><rect x="6.4516%" y="917" width="0.8065%" height="15" fill="rgb(239,60,40)" fg:x="8" fg:w="1"/><text x="6.7016%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;monoio::driver::op::Op&lt;monoio::driver::op::send::Send&lt;monoio::buf::slice::Slice&lt;monoio::buf::slice::Slice&lt;alloc::boxed::Box&lt;[u8]&gt;&gt;&gt;&gt;&gt;&gt; (2 samples, 1.61%)</title><rect x="6.4516%" y="933" width="1.6129%" height="15" fill="rgb(206,27,48)" fg:x="8" fg:w="2"/><text x="6.7016%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;monoio::driver::op::Op&lt;monoio::driver::op::send::Send&lt;monoio::buf::slice::Slice&lt;monoio::buf::slice::Slice&lt;alloc::boxed::Box&lt;[u8]&gt;&gt;&gt;&gt;&gt;&gt; (1 samples, 0.81%)</title><rect x="7.2581%" y="917" width="0.8065%" height="15" fill="rgb(225,35,8)" fg:x="9" fg:w="1"/><text x="7.5081%" y="927.50"></text></g><g><title>io_uring::sys::to_result (1 samples, 0.81%)</title><rect x="8.0645%" y="837" width="0.8065%" height="15" fill="rgb(250,213,24)" fg:x="10" fg:w="1"/><text x="8.3145%" y="847.50"></text></g><g><title>__cond_resched (2 samples, 1.61%)</title><rect x="12.9032%" y="517" width="1.6129%" height="15" fill="rgb(247,123,22)" fg:x="16" fg:w="2"/><text x="13.1532%" y="527.50"></text></g><g><title>rcu_all_qs (2 samples, 1.61%)</title><rect x="12.9032%" y="501" width="1.6129%" height="15" fill="rgb(231,138,38)" fg:x="16" fg:w="2"/><text x="13.1532%" y="511.50"></text></g><g><title>__check_object_size (1 samples, 0.81%)</title><rect x="14.5161%" y="501" width="0.8065%" height="15" fill="rgb(231,145,46)" fg:x="18" fg:w="1"/><text x="14.7661%" y="511.50"></text></g><g><title>__check_object_size.part.0 (1 samples, 0.81%)</title><rect x="14.5161%" y="485" width="0.8065%" height="15" fill="rgb(251,118,11)" fg:x="18" fg:w="1"/><text x="14.7661%" y="495.50"></text></g><g><title>pfn_is_map_memory (1 samples, 0.81%)</title><rect x="14.5161%" y="469" width="0.8065%" height="15" fill="rgb(217,147,25)" fg:x="18" fg:w="1"/><text x="14.7661%" y="479.50"></text></g><g><title>skb_copy_datagram_iter (5 samples, 4.03%)</title><rect x="12.9032%" y="549" width="4.0323%" height="15" fill="rgb(247,81,37)" fg:x="16" fg:w="5"/><text x="13.1532%" y="559.50">skb_..</text></g><g><title>__skb_datagram_iter (5 samples, 4.03%)</title><rect x="12.9032%" y="533" width="4.0323%" height="15" fill="rgb(209,12,38)" fg:x="16" fg:w="5"/><text x="13.1532%" y="543.50">__sk..</text></g><g><title>simple_copy_to_iter (3 samples, 2.42%)</title><rect x="14.5161%" y="517" width="2.4194%" height="15" fill="rgb(227,1,9)" fg:x="18" fg:w="3"/><text x="14.7661%" y="527.50">si..</text></g><g><title>_copy_to_iter (2 samples, 1.61%)</title><rect x="15.3226%" y="501" width="1.6129%" height="15" fill="rgb(248,47,43)" fg:x="19" fg:w="2"/><text x="15.5726%" y="511.50"></text></g><g><title>copyout (2 samples, 1.61%)</title><rect x="15.3226%" y="485" width="1.6129%" height="15" fill="rgb(221,10,30)" fg:x="19" fg:w="2"/><text x="15.5726%" y="495.50"></text></g><g><title>io_recv (8 samples, 6.45%)</title><rect x="11.2903%" y="629" width="6.4516%" height="15" fill="rgb(210,229,1)" fg:x="14" fg:w="8"/><text x="11.5403%" y="639.50">io_recv</text></g><g><title>sock_recvmsg (8 samples, 6.45%)</title><rect x="11.2903%" y="613" width="6.4516%" height="15" fill="rgb(222,148,37)" fg:x="14" fg:w="8"/><text x="11.5403%" y="623.50">sock_rec..</text></g><g><title>inet_recvmsg (7 samples, 5.65%)</title><rect x="12.0968%" y="597" width="5.6452%" height="15" fill="rgb(234,67,33)" fg:x="15" fg:w="7"/><text x="12.3468%" y="607.50">inet_re..</text></g><g><title>tcp_recvmsg (7 samples, 5.65%)</title><rect x="12.0968%" y="581" width="5.6452%" height="15" fill="rgb(247,98,35)" fg:x="15" fg:w="7"/><text x="12.3468%" y="591.50">tcp_rec..</text></g><g><title>tcp_recvmsg_locked (7 samples, 5.65%)</title><rect x="12.0968%" y="565" width="5.6452%" height="15" fill="rgb(247,138,52)" fg:x="15" fg:w="7"/><text x="12.3468%" y="575.50">tcp_rec..</text></g><g><title>tcp_rcv_space_adjust (1 samples, 0.81%)</title><rect x="16.9355%" y="549" width="0.8065%" height="15" fill="rgb(213,79,30)" fg:x="21" fg:w="1"/><text x="17.1855%" y="559.50"></text></g><g><title>tcp_mstamp_refresh (1 samples, 0.81%)</title><rect x="16.9355%" y="533" width="0.8065%" height="15" fill="rgb(246,177,23)" fg:x="21" fg:w="1"/><text x="17.1855%" y="543.50"></text></g><g><title>ktime_get (1 samples, 0.81%)</title><rect x="16.9355%" y="517" width="0.8065%" height="15" fill="rgb(230,62,27)" fg:x="21" fg:w="1"/><text x="17.1855%" y="527.50"></text></g><g><title>arch_counter_get_cntvct (1 samples, 0.81%)</title><rect x="16.9355%" y="501" width="0.8065%" height="15" fill="rgb(216,154,8)" fg:x="21" fg:w="1"/><text x="17.1855%" y="511.50"></text></g><g><title>__local_bh_enable_ip (1 samples, 0.81%)</title><rect x="17.7419%" y="565" width="0.8065%" height="15" fill="rgb(244,35,45)" fg:x="22" fg:w="1"/><text x="17.9919%" y="575.50"></text></g><g><title>sk_page_frag_refill (1 samples, 0.81%)</title><rect x="21.7742%" y="549" width="0.8065%" height="15" fill="rgb(251,115,12)" fg:x="27" fg:w="1"/><text x="22.0242%" y="559.50"></text></g><g><title>skb_page_frag_refill (1 samples, 0.81%)</title><rect x="21.7742%" y="533" width="0.8065%" height="15" fill="rgb(240,54,50)" fg:x="27" fg:w="1"/><text x="22.0242%" y="543.50"></text></g><g><title>kmalloc_reserve (2 samples, 1.61%)</title><rect x="22.5806%" y="517" width="1.6129%" height="15" fill="rgb(233,84,52)" fg:x="28" fg:w="2"/><text x="22.8306%" y="527.50"></text></g><g><title>__kmalloc_node_track_caller (2 samples, 1.61%)</title><rect x="22.5806%" y="501" width="1.6129%" height="15" fill="rgb(207,117,47)" fg:x="28" fg:w="2"/><text x="22.8306%" y="511.50"></text></g><g><title>sk_stream_alloc_skb (5 samples, 4.03%)</title><rect x="22.5806%" y="549" width="4.0323%" height="15" fill="rgb(249,43,39)" fg:x="28" fg:w="5"/><text x="22.8306%" y="559.50">sk_s..</text></g><g><title>__alloc_skb (5 samples, 4.03%)</title><rect x="22.5806%" y="533" width="4.0323%" height="15" fill="rgb(209,38,44)" fg:x="28" fg:w="5"/><text x="22.8306%" y="543.50">__al..</text></g><g><title>kmem_cache_alloc_node (3 samples, 2.42%)</title><rect x="24.1935%" y="517" width="2.4194%" height="15" fill="rgb(236,212,23)" fg:x="30" fg:w="3"/><text x="24.4435%" y="527.50">km..</text></g><g><title>___slab_alloc (1 samples, 0.81%)</title><rect x="25.8065%" y="501" width="0.8065%" height="15" fill="rgb(242,79,21)" fg:x="32" fg:w="1"/><text x="26.0565%" y="511.50"></text></g><g><title>__ip_local_out (1 samples, 0.81%)</title><rect x="29.0323%" y="453" width="0.8065%" height="15" fill="rgb(211,96,35)" fg:x="36" fg:w="1"/><text x="29.2823%" y="463.50"></text></g><g><title>ip_rcv_core (3 samples, 2.42%)</title><rect x="38.7097%" y="245" width="2.4194%" height="15" fill="rgb(253,215,40)" fg:x="48" fg:w="3"/><text x="38.9597%" y="255.50">ip..</text></g><g><title>sock_put (1 samples, 0.81%)</title><rect x="45.9677%" y="165" width="0.8065%" height="15" fill="rgb(211,81,21)" fg:x="57" fg:w="1"/><text x="46.2177%" y="175.50"></text></g><g><title>rb_next (1 samples, 0.81%)</title><rect x="49.1935%" y="117" width="0.8065%" height="15" fill="rgb(208,190,38)" fg:x="61" fg:w="1"/><text x="49.4435%" y="127.50"></text></g><g><title>__kfree_skb (1 samples, 0.81%)</title><rect x="50.0000%" y="101" width="0.8065%" height="15" fill="rgb(235,213,38)" fg:x="62" fg:w="1"/><text x="50.2500%" y="111.50"></text></g><g><title>skb_release_data (1 samples, 0.81%)</title><rect x="50.0000%" y="85" width="0.8065%" height="15" fill="rgb(237,122,38)" fg:x="62" fg:w="1"/><text x="50.2500%" y="95.50"></text></g><g><title>skb_free_head (1 samples, 0.81%)</title><rect x="50.0000%" y="69" width="0.8065%" height="15" fill="rgb(244,218,35)" fg:x="62" fg:w="1"/><text x="50.2500%" y="79.50"></text></g><g><title>kfree (1 samples, 0.81%)</title><rect x="50.0000%" y="53" width="0.8065%" height="15" fill="rgb(240,68,47)" fg:x="62" fg:w="1"/><text x="50.2500%" y="63.50"></text></g><g><title>tcp_ack_update_rtt (2 samples, 1.61%)</title><rect x="50.8065%" y="101" width="1.6129%" height="15" fill="rgb(210,16,53)" fg:x="63" fg:w="2"/><text x="51.0565%" y="111.50"></text></g><g><title>tcp_clean_rtx_queue.constprop.0 (4 samples, 3.23%)</title><rect x="50.0000%" y="117" width="3.2258%" height="15" fill="rgb(235,124,12)" fg:x="62" fg:w="4"/><text x="50.2500%" y="127.50">tcp..</text></g><g><title>tcp_chrono_stop (1 samples, 0.81%)</title><rect x="52.4194%" y="101" width="0.8065%" height="15" fill="rgb(224,169,11)" fg:x="65" fg:w="1"/><text x="52.6694%" y="111.50"></text></g><g><title>tcp_ack (9 samples, 7.26%)</title><rect x="46.7742%" y="133" width="7.2581%" height="15" fill="rgb(250,166,2)" fg:x="58" fg:w="9"/><text x="47.0242%" y="143.50">tcp_ack</text></g><g><title>tcp_rate_gen (1 samples, 0.81%)</title><rect x="53.2258%" y="117" width="0.8065%" height="15" fill="rgb(242,216,29)" fg:x="66" fg:w="1"/><text x="53.4758%" y="127.50"></text></g><g><title>tcp_data_ready (13 samples, 10.48%)</title><rect x="54.0323%" y="133" width="10.4839%" height="15" fill="rgb(230,116,27)" fg:x="67" fg:w="13"/><text x="54.2823%" y="143.50">tcp_data_ready</text></g><g><title>sock_def_readable (13 samples, 10.48%)</title><rect x="54.0323%" y="117" width="10.4839%" height="15" fill="rgb(228,99,48)" fg:x="67" fg:w="13"/><text x="54.2823%" y="127.50">sock_def_readab..</text></g><g><title>__wake_up_sync_key (13 samples, 10.48%)</title><rect x="54.0323%" y="101" width="10.4839%" height="15" fill="rgb(253,11,6)" fg:x="67" fg:w="13"/><text x="54.2823%" y="111.50">__wake_up_sync_..</text></g><g><title>__wake_up_common_lock (13 samples, 10.48%)</title><rect x="54.0323%" y="85" width="10.4839%" height="15" fill="rgb(247,143,39)" fg:x="67" fg:w="13"/><text x="54.2823%" y="95.50">__wake_up_commo..</text></g><g><title>__raw_spin_lock_irqsave (1 samples, 0.81%)</title><rect x="63.7097%" y="69" width="0.8065%" height="15" fill="rgb(236,97,10)" fg:x="79" fg:w="1"/><text x="63.9597%" y="79.50"></text></g><g><title>__local_bh_enable_ip (42 samples, 33.87%)</title><rect x="32.2581%" y="389" width="33.8710%" height="15" fill="rgb(233,208,19)" fg:x="40" fg:w="42"/><text x="32.5081%" y="399.50">__local_bh_enable_ip</text></g><g><title>do_softirq (42 samples, 33.87%)</title><rect x="32.2581%" y="373" width="33.8710%" height="15" fill="rgb(216,164,2)" fg:x="40" fg:w="42"/><text x="32.5081%" y="383.50">do_softirq</text></g><g><title>__softirqentry_text_start (40 samples, 32.26%)</title><rect x="33.8710%" y="357" width="32.2581%" height="15" fill="rgb(220,129,5)" fg:x="42" fg:w="40"/><text x="34.1210%" y="367.50">__softirqentry_text_start</text></g><g><title>net_rx_action (39 samples, 31.45%)</title><rect x="34.6774%" y="341" width="31.4516%" height="15" fill="rgb(242,17,10)" fg:x="43" fg:w="39"/><text x="34.9274%" y="351.50">net_rx_action</text></g><g><title>__napi_poll (39 samples, 31.45%)</title><rect x="34.6774%" y="325" width="31.4516%" height="15" fill="rgb(242,107,0)" fg:x="43" fg:w="39"/><text x="34.9274%" y="335.50">__napi_poll</text></g><g><title>process_backlog (39 samples, 31.45%)</title><rect x="34.6774%" y="309" width="31.4516%" height="15" fill="rgb(251,28,31)" fg:x="43" fg:w="39"/><text x="34.9274%" y="319.50">process_backlog</text></g><g><title>__netif_receive_skb (36 samples, 29.03%)</title><rect x="37.0968%" y="293" width="29.0323%" height="15" fill="rgb(233,223,10)" fg:x="46" fg:w="36"/><text x="37.3468%" y="303.50">__netif_receive_skb</text></g><g><title>__netif_receive_skb_one_core (35 samples, 28.23%)</title><rect x="37.9032%" y="277" width="28.2258%" height="15" fill="rgb(215,21,27)" fg:x="47" fg:w="35"/><text x="38.1532%" y="287.50">__netif_receive_skb_one_core</text></g><g><title>ip_rcv (35 samples, 28.23%)</title><rect x="37.9032%" y="261" width="28.2258%" height="15" fill="rgb(232,23,21)" fg:x="47" fg:w="35"/><text x="38.1532%" y="271.50">ip_rcv</text></g><g><title>ip_rcv_finish (31 samples, 25.00%)</title><rect x="41.1290%" y="245" width="25.0000%" height="15" fill="rgb(244,5,23)" fg:x="51" fg:w="31"/><text x="41.3790%" y="255.50">ip_rcv_finish</text></g><g><title>ip_local_deliver (30 samples, 24.19%)</title><rect x="41.9355%" y="229" width="24.1935%" height="15" fill="rgb(226,81,46)" fg:x="52" fg:w="30"/><text x="42.1855%" y="239.50">ip_local_deliver</text></g><g><title>ip_local_deliver_finish (30 samples, 24.19%)</title><rect x="41.9355%" y="213" width="24.1935%" height="15" fill="rgb(247,70,30)" fg:x="52" fg:w="30"/><text x="42.1855%" y="223.50">ip_local_deliver_finish</text></g><g><title>ip_protocol_deliver_rcu (29 samples, 23.39%)</title><rect x="42.7419%" y="197" width="23.3871%" height="15" fill="rgb(212,68,19)" fg:x="53" fg:w="29"/><text x="42.9919%" y="207.50">ip_protocol_deliver_rcu</text></g><g><title>tcp_v4_rcv (29 samples, 23.39%)</title><rect x="42.7419%" y="181" width="23.3871%" height="15" fill="rgb(240,187,13)" fg:x="53" fg:w="29"/><text x="42.9919%" y="191.50">tcp_v4_rcv</text></g><g><title>tcp_v4_do_rcv (24 samples, 19.35%)</title><rect x="46.7742%" y="165" width="19.3548%" height="15" fill="rgb(223,113,26)" fg:x="58" fg:w="24"/><text x="47.0242%" y="175.50">tcp_v4_do_rcv</text></g><g><title>tcp_rcv_established (24 samples, 19.35%)</title><rect x="46.7742%" y="149" width="19.3548%" height="15" fill="rgb(206,192,2)" fg:x="58" fg:w="24"/><text x="47.0242%" y="159.50">tcp_rcv_established</text></g><g><title>tcp_mstamp_refresh (2 samples, 1.61%)</title><rect x="64.5161%" y="133" width="1.6129%" height="15" fill="rgb(241,108,4)" fg:x="80" fg:w="2"/><text x="64.7661%" y="143.50"></text></g><g><title>ktime_get (2 samples, 1.61%)</title><rect x="64.5161%" y="117" width="1.6129%" height="15" fill="rgb(247,173,49)" fg:x="80" fg:w="2"/><text x="64.7661%" y="127.50"></text></g><g><title>arch_counter_get_cntvct (1 samples, 0.81%)</title><rect x="65.3226%" y="101" width="0.8065%" height="15" fill="rgb(224,114,35)" fg:x="81" fg:w="1"/><text x="65.5726%" y="111.50"></text></g><g><title>dev_hard_start_xmit (7 samples, 5.65%)</title><rect x="66.1290%" y="341" width="5.6452%" height="15" fill="rgb(245,159,27)" fg:x="82" fg:w="7"/><text x="66.3790%" y="351.50">dev_har..</text></g><g><title>xmit_one.constprop.0 (7 samples, 5.65%)</title><rect x="66.1290%" y="325" width="5.6452%" height="15" fill="rgb(245,172,44)" fg:x="82" fg:w="7"/><text x="66.3790%" y="335.50">xmit_on..</text></g><g><title>loopback_xmit (7 samples, 5.65%)</title><rect x="66.1290%" y="309" width="5.6452%" height="15" fill="rgb(236,23,11)" fg:x="82" fg:w="7"/><text x="66.3790%" y="319.50">loopbac..</text></g><g><title>netif_rx (6 samples, 4.84%)</title><rect x="66.9355%" y="293" width="4.8387%" height="15" fill="rgb(205,117,38)" fg:x="83" fg:w="6"/><text x="67.1855%" y="303.50">netif_..</text></g><g><title>netif_rx_internal (6 samples, 4.84%)</title><rect x="66.9355%" y="277" width="4.8387%" height="15" fill="rgb(237,72,25)" fg:x="83" fg:w="6"/><text x="67.1855%" y="287.50">netif_..</text></g><g><title>ktime_get_with_offset (5 samples, 4.03%)</title><rect x="67.7419%" y="261" width="4.0323%" height="15" fill="rgb(244,70,9)" fg:x="84" fg:w="5"/><text x="67.9919%" y="271.50">ktim..</text></g><g><title>arch_counter_get_cntvct (3 samples, 2.42%)</title><rect x="69.3548%" y="245" width="2.4194%" height="15" fill="rgb(217,125,39)" fg:x="86" fg:w="3"/><text x="69.6048%" y="255.50">ar..</text></g><g><title>netdev_core_pick_tx (2 samples, 1.61%)</title><rect x="71.7742%" y="341" width="1.6129%" height="15" fill="rgb(235,36,10)" fg:x="89" fg:w="2"/><text x="72.0242%" y="351.50"></text></g><g><title>__tcp_transmit_skb (57 samples, 45.97%)</title><rect x="28.2258%" y="501" width="45.9677%" height="15" fill="rgb(251,123,47)" fg:x="35" fg:w="57"/><text x="28.4758%" y="511.50">__tcp_transmit_skb</text></g><g><title>ip_queue_xmit (56 samples, 45.16%)</title><rect x="29.0323%" y="485" width="45.1613%" height="15" fill="rgb(221,13,13)" fg:x="36" fg:w="56"/><text x="29.2823%" y="495.50">ip_queue_xmit</text></g><g><title>__ip_queue_xmit (56 samples, 45.16%)</title><rect x="29.0323%" y="469" width="45.1613%" height="15" fill="rgb(238,131,9)" fg:x="36" fg:w="56"/><text x="29.2823%" y="479.50">__ip_queue_xmit</text></g><g><title>ip_output (55 samples, 44.35%)</title><rect x="29.8387%" y="453" width="44.3548%" height="15" fill="rgb(211,50,8)" fg:x="37" fg:w="55"/><text x="30.0887%" y="463.50">ip_output</text></g><g><title>ip_finish_output (55 samples, 44.35%)</title><rect x="29.8387%" y="437" width="44.3548%" height="15" fill="rgb(245,182,24)" fg:x="37" fg:w="55"/><text x="30.0887%" y="447.50">ip_finish_output</text></g><g><title>__ip_finish_output (53 samples, 42.74%)</title><rect x="31.4516%" y="421" width="42.7419%" height="15" fill="rgb(242,14,37)" fg:x="39" fg:w="53"/><text x="31.7016%" y="431.50">__ip_finish_output</text></g><g><title>ip_finish_output2 (53 samples, 42.74%)</title><rect x="31.4516%" y="405" width="42.7419%" height="15" fill="rgb(246,228,12)" fg:x="39" fg:w="53"/><text x="31.7016%" y="415.50">ip_finish_output2</text></g><g><title>neigh_hh_output (10 samples, 8.06%)</title><rect x="66.1290%" y="389" width="8.0645%" height="15" fill="rgb(213,55,15)" fg:x="82" fg:w="10"/><text x="66.3790%" y="399.50">neigh_hh_ou..</text></g><g><title>dev_queue_xmit (10 samples, 8.06%)</title><rect x="66.1290%" y="373" width="8.0645%" height="15" fill="rgb(209,9,3)" fg:x="82" fg:w="10"/><text x="66.3790%" y="383.50">dev_queue_x..</text></g><g><title>__dev_queue_xmit (10 samples, 8.06%)</title><rect x="66.1290%" y="357" width="8.0645%" height="15" fill="rgb(230,59,30)" fg:x="82" fg:w="10"/><text x="66.3790%" y="367.50">__dev_queue..</text></g><g><title>validate_xmit_skb (1 samples, 0.81%)</title><rect x="73.3871%" y="341" width="0.8065%" height="15" fill="rgb(209,121,21)" fg:x="91" fg:w="1"/><text x="73.6371%" y="351.50"></text></g><g><title>netif_skb_features (1 samples, 0.81%)</title><rect x="73.3871%" y="325" width="0.8065%" height="15" fill="rgb(220,109,13)" fg:x="91" fg:w="1"/><text x="73.6371%" y="335.50"></text></g><g><title>tcp_push (63 samples, 50.81%)</title><rect x="26.6129%" y="549" width="50.8065%" height="15" fill="rgb(232,18,1)" fg:x="33" fg:w="63"/><text x="26.8629%" y="559.50">tcp_push</text></g><g><title>__tcp_push_pending_frames (61 samples, 49.19%)</title><rect x="28.2258%" y="533" width="49.1935%" height="15" fill="rgb(215,41,42)" fg:x="35" fg:w="61"/><text x="28.4758%" y="543.50">__tcp_push_pending_frames</text></g><g><title>tcp_write_xmit (61 samples, 49.19%)</title><rect x="28.2258%" y="517" width="49.1935%" height="15" fill="rgb(224,123,36)" fg:x="35" fg:w="61"/><text x="28.4758%" y="527.50">tcp_write_xmit</text></g><g><title>ktime_get (4 samples, 3.23%)</title><rect x="74.1935%" y="501" width="3.2258%" height="15" fill="rgb(240,125,3)" fg:x="92" fg:w="4"/><text x="74.4435%" y="511.50">kti..</text></g><g><title>arch_counter_get_cntvct (4 samples, 3.23%)</title><rect x="74.1935%" y="485" width="3.2258%" height="15" fill="rgb(205,98,50)" fg:x="92" fg:w="4"/><text x="74.4435%" y="495.50">arc..</text></g><g><title>io_issue_sqe (85 samples, 68.55%)</title><rect x="10.4839%" y="645" width="68.5484%" height="15" fill="rgb(205,185,37)" fg:x="13" fg:w="85"/><text x="10.7339%" y="655.50">io_issue_sqe</text></g><g><title>io_send (76 samples, 61.29%)</title><rect x="17.7419%" y="629" width="61.2903%" height="15" fill="rgb(238,207,15)" fg:x="22" fg:w="76"/><text x="17.9919%" y="639.50">io_send</text></g><g><title>sock_sendmsg (76 samples, 61.29%)</title><rect x="17.7419%" y="613" width="61.2903%" height="15" fill="rgb(213,199,42)" fg:x="22" fg:w="76"/><text x="17.9919%" y="623.50">sock_sendmsg</text></g><g><title>inet_sendmsg (76 samples, 61.29%)</title><rect x="17.7419%" y="597" width="61.2903%" height="15" fill="rgb(235,201,11)" fg:x="22" fg:w="76"/><text x="17.9919%" y="607.50">inet_sendmsg</text></g><g><title>tcp_sendmsg (76 samples, 61.29%)</title><rect x="17.7419%" y="581" width="61.2903%" height="15" fill="rgb(207,46,11)" fg:x="22" fg:w="76"/><text x="17.9919%" y="591.50">tcp_sendmsg</text></g><g><title>tcp_sendmsg_locked (75 samples, 60.48%)</title><rect x="18.5484%" y="565" width="60.4839%" height="15" fill="rgb(241,35,35)" fg:x="23" fg:w="75"/><text x="18.7984%" y="575.50">tcp_sendmsg_locked</text></g><g><title>tcp_skb_entail (2 samples, 1.61%)</title><rect x="77.4194%" y="549" width="1.6129%" height="15" fill="rgb(243,32,47)" fg:x="96" fg:w="2"/><text x="77.6694%" y="559.50"></text></g><g><title>__io_queue_sqe (87 samples, 70.16%)</title><rect x="9.6774%" y="661" width="70.1613%" height="15" fill="rgb(247,202,23)" fg:x="12" fg:w="87"/><text x="9.9274%" y="671.50">__io_queue_sqe</text></g><g><title>io_submit_flush_completions (1 samples, 0.81%)</title><rect x="79.0323%" y="645" width="0.8065%" height="15" fill="rgb(219,102,11)" fg:x="98" fg:w="1"/><text x="79.2823%" y="655.50"></text></g><g><title>io_uring::submit::Submitter::submit_and_wait (97 samples, 78.23%)</title><rect x="8.0645%" y="933" width="78.2258%" height="15" fill="rgb(243,110,44)" fg:x="10" fg:w="97"/><text x="8.3145%" y="943.50">io_uring::submit::Submitter::submit_and_wait</text></g><g><title>io_uring::submit::Submitter::enter (97 samples, 78.23%)</title><rect x="8.0645%" y="917" width="78.2258%" height="15" fill="rgb(222,74,54)" fg:x="10" fg:w="97"/><text x="8.3145%" y="927.50">io_uring::submit::Submitter::enter</text></g><g><title>io_uring::sys::io_uring_enter (97 samples, 78.23%)</title><rect x="8.0645%" y="901" width="78.2258%" height="15" fill="rgb(216,99,12)" fg:x="10" fg:w="97"/><text x="8.3145%" y="911.50">io_uring::sys::io_uring_enter</text></g><g><title>io_uring::submit::Submitter::submit_and_wait (97 samples, 78.23%)</title><rect x="8.0645%" y="885" width="78.2258%" height="15" fill="rgb(226,22,26)" fg:x="10" fg:w="97"/><text x="8.3145%" y="895.50">io_uring::submit::Submitter::submit_and_wait</text></g><g><title>io_uring::submit::Submitter::enter (97 samples, 78.23%)</title><rect x="8.0645%" y="869" width="78.2258%" height="15" fill="rgb(217,163,10)" fg:x="10" fg:w="97"/><text x="8.3145%" y="879.50">io_uring::submit::Submitter::enter</text></g><g><title>io_uring::sys::io_uring_enter (97 samples, 78.23%)</title><rect x="8.0645%" y="853" width="78.2258%" height="15" fill="rgb(213,25,53)" fg:x="10" fg:w="97"/><text x="8.3145%" y="863.50">io_uring::sys::io_uring_enter</text></g><g><title>syscall (96 samples, 77.42%)</title><rect x="8.8710%" y="837" width="77.4194%" height="15" fill="rgb(252,105,26)" fg:x="11" fg:w="96"/><text x="9.1210%" y="847.50">syscall</text></g><g><title>el0t_64_sync (96 samples, 77.42%)</title><rect x="8.8710%" y="821" width="77.4194%" height="15" fill="rgb(220,39,43)" fg:x="11" fg:w="96"/><text x="9.1210%" y="831.50">el0t_64_sync</text></g><g><title>el0t_64_sync_handler (96 samples, 77.42%)</title><rect x="8.8710%" y="805" width="77.4194%" height="15" fill="rgb(229,68,48)" fg:x="11" fg:w="96"/><text x="9.1210%" y="815.50">el0t_64_sync_handler</text></g><g><title>el0_svc (96 samples, 77.42%)</title><rect x="8.8710%" y="789" width="77.4194%" height="15" fill="rgb(252,8,32)" fg:x="11" fg:w="96"/><text x="9.1210%" y="799.50">el0_svc</text></g><g><title>do_el0_svc (96 samples, 77.42%)</title><rect x="8.8710%" y="773" width="77.4194%" height="15" fill="rgb(223,20,43)" fg:x="11" fg:w="96"/><text x="9.1210%" y="783.50">do_el0_svc</text></g><g><title>el0_svc_common.constprop.0 (96 samples, 77.42%)</title><rect x="8.8710%" y="757" width="77.4194%" height="15" fill="rgb(229,81,49)" fg:x="11" fg:w="96"/><text x="9.1210%" y="767.50">el0_svc_common.constprop.0</text></g><g><title>invoke_syscall (95 samples, 76.61%)</title><rect x="9.6774%" y="741" width="76.6129%" height="15" fill="rgb(236,28,36)" fg:x="12" fg:w="95"/><text x="9.9274%" y="751.50">invoke_syscall</text></g><g><title>__arm64_sys_io_uring_enter (95 samples, 76.61%)</title><rect x="9.6774%" y="725" width="76.6129%" height="15" fill="rgb(249,185,26)" fg:x="12" fg:w="95"/><text x="9.9274%" y="735.50">__arm64_sys_io_uring_enter</text></g><g><title>__do_sys_io_uring_enter (95 samples, 76.61%)</title><rect x="9.6774%" y="709" width="76.6129%" height="15" fill="rgb(249,174,33)" fg:x="12" fg:w="95"/><text x="9.9274%" y="719.50">__do_sys_io_uring_enter</text></g><g><title>io_submit_sqes (95 samples, 76.61%)</title><rect x="9.6774%" y="693" width="76.6129%" height="15" fill="rgb(233,201,37)" fg:x="12" fg:w="95"/><text x="9.9274%" y="703.50">io_submit_sqes</text></g><g><title>io_submit_sqe (95 samples, 76.61%)</title><rect x="9.6774%" y="677" width="76.6129%" height="15" fill="rgb(221,78,26)" fg:x="12" fg:w="95"/><text x="9.9274%" y="687.50">io_submit_sqe</text></g><g><title>io_init_req (8 samples, 6.45%)</title><rect x="79.8387%" y="661" width="6.4516%" height="15" fill="rgb(250,127,30)" fg:x="99" fg:w="8"/><text x="80.0887%" y="671.50">io_init_..</text></g><g><title>io_file_get_normal (6 samples, 4.84%)</title><rect x="81.4516%" y="645" width="4.8387%" height="15" fill="rgb(230,49,44)" fg:x="101" fg:w="6"/><text x="81.7016%" y="655.50">io_fil..</text></g><g><title>fget (6 samples, 4.84%)</title><rect x="81.4516%" y="629" width="4.8387%" height="15" fill="rgb(229,67,23)" fg:x="101" fg:w="6"/><text x="81.7016%" y="639.50">fget</text></g><g><title>__fget_files (6 samples, 4.84%)</title><rect x="81.4516%" y="613" width="4.8387%" height="15" fill="rgb(249,83,47)" fg:x="101" fg:w="6"/><text x="81.7016%" y="623.50">__fget..</text></g><g><title>monoio::driver::uring::UringInner::poll_op (1 samples, 0.81%)</title><rect x="86.2903%" y="933" width="0.8065%" height="15" fill="rgb(215,43,3)" fg:x="107" fg:w="1"/><text x="86.5403%" y="943.50"></text></g><g><title>monoio::driver::uring::lifecycle::&lt;impl monoio::utils::slab::Ref&lt;monoio::driver::uring::lifecycle::Lifecycle&gt;&gt;::poll_op (1 samples, 0.81%)</title><rect x="86.2903%" y="917" width="0.8065%" height="15" fill="rgb(238,154,13)" fg:x="107" fg:w="1"/><text x="86.5403%" y="927.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (1 samples, 0.81%)</title><rect x="86.2903%" y="901" width="0.8065%" height="15" fill="rgb(219,56,2)" fg:x="107" fg:w="1"/><text x="86.5403%" y="911.50"></text></g><g><title>monoio::driver::uring::UringInner::poll_op (1 samples, 0.81%)</title><rect x="86.2903%" y="885" width="0.8065%" height="15" fill="rgb(233,0,4)" fg:x="107" fg:w="1"/><text x="86.5403%" y="895.50"></text></g><g><title>monoio::driver::uring::lifecycle::&lt;impl monoio::utils::slab::Ref&lt;monoio::driver::uring::lifecycle::Lifecycle&gt;&gt;::poll_op (1 samples, 0.81%)</title><rect x="86.2903%" y="869" width="0.8065%" height="15" fill="rgb(235,30,7)" fg:x="107" fg:w="1"/><text x="86.5403%" y="879.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (1 samples, 0.81%)</title><rect x="86.2903%" y="853" width="0.8065%" height="15" fill="rgb(250,79,13)" fg:x="107" fg:w="1"/><text x="86.5403%" y="863.50"></text></g><g><title>monoio::driver::uring::UringInner::tick (1 samples, 0.81%)</title><rect x="87.0968%" y="933" width="0.8065%" height="15" fill="rgb(211,146,34)" fg:x="108" fg:w="1"/><text x="87.3468%" y="943.50"></text></g><g><title>monoio::driver::uring::Ops::complete (1 samples, 0.81%)</title><rect x="87.0968%" y="917" width="0.8065%" height="15" fill="rgb(228,22,38)" fg:x="108" fg:w="1"/><text x="87.3468%" y="927.50"></text></g><g><title>monoio::driver::uring::lifecycle::&lt;impl monoio::utils::slab::Ref&lt;monoio::driver::uring::lifecycle::Lifecycle&gt;&gt;::complete (1 samples, 0.81%)</title><rect x="87.0968%" y="901" width="0.8065%" height="15" fill="rgb(235,168,5)" fg:x="108" fg:w="1"/><text x="87.3468%" y="911.50"></text></g><g><title>core::task::wake::Waker::wake (1 samples, 0.81%)</title><rect x="87.0968%" y="885" width="0.8065%" height="15" fill="rgb(221,155,16)" fg:x="108" fg:w="1"/><text x="87.3468%" y="895.50"></text></g><g><title>&lt;monoio::scheduler::LocalScheduler as monoio::task::Schedule&gt;::schedule (1 samples, 0.81%)</title><rect x="87.0968%" y="869" width="0.8065%" height="15" fill="rgb(215,215,53)" fg:x="108" fg:w="1"/><text x="87.3468%" y="879.50"></text></g><g><title>monoio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (1 samples, 0.81%)</title><rect x="87.0968%" y="853" width="0.8065%" height="15" fill="rgb(223,4,10)" fg:x="108" fg:w="1"/><text x="87.3468%" y="863.50"></text></g><g><title>&lt;monoio::scheduler::LocalScheduler as monoio::task::Schedule&gt;::schedule::{{closure}} (1 samples, 0.81%)</title><rect x="87.0968%" y="837" width="0.8065%" height="15" fill="rgb(234,103,6)" fg:x="108" fg:w="1"/><text x="87.3468%" y="847.50"></text></g><g><title>monoio::scheduler::TaskQueue::push (1 samples, 0.81%)</title><rect x="87.0968%" y="821" width="0.8065%" height="15" fill="rgb(227,97,0)" fg:x="108" fg:w="1"/><text x="87.3468%" y="831.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (1 samples, 0.81%)</title><rect x="87.0968%" y="805" width="0.8065%" height="15" fill="rgb(234,150,53)" fg:x="108" fg:w="1"/><text x="87.3468%" y="815.50"></text></g><g><title>monoio::driver::CURRENT::FOO::__getit (1 samples, 0.81%)</title><rect x="87.9032%" y="789" width="0.8065%" height="15" fill="rgb(228,201,54)" fg:x="109" fg:w="1"/><text x="88.1532%" y="799.50"></text></g><g><title>std::sys::common::thread_local::fast_local::Key&lt;T&gt;::get (1 samples, 0.81%)</title><rect x="87.9032%" y="773" width="0.8065%" height="15" fill="rgb(222,22,37)" fg:x="109" fg:w="1"/><text x="88.1532%" y="783.50"></text></g><g><title>std::sys::common::thread_local::lazy::LazyKeyInner&lt;T&gt;::get (1 samples, 0.81%)</title><rect x="87.9032%" y="757" width="0.8065%" height="15" fill="rgb(237,53,32)" fg:x="109" fg:w="1"/><text x="88.1532%" y="767.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.81%)</title><rect x="87.9032%" y="741" width="0.8065%" height="15" fill="rgb(233,25,53)" fg:x="109" fg:w="1"/><text x="88.1532%" y="751.50"></text></g><g><title>&lt;monoio::io::util::split::OwnedWriteHalf&lt;Inner&gt; as monoio::io::async_write_rent::AsyncWriteRent&gt;::write (2 samples, 1.61%)</title><rect x="87.9032%" y="901" width="1.6129%" height="15" fill="rgb(210,40,34)" fg:x="109" fg:w="2"/><text x="88.1532%" y="911.50"></text></g><g><title>&lt;monoio::net::tcp::stream::TcpStream as monoio::io::async_write_rent::AsyncWriteRent&gt;::write (2 samples, 1.61%)</title><rect x="87.9032%" y="885" width="1.6129%" height="15" fill="rgb(241,220,44)" fg:x="109" fg:w="2"/><text x="88.1532%" y="895.50"></text></g><g><title>monoio::driver::op::send::&lt;impl monoio::driver::op::Op&lt;monoio::driver::op::send::Send&lt;T&gt;&gt;&gt;::send (2 samples, 1.61%)</title><rect x="87.9032%" y="869" width="1.6129%" height="15" fill="rgb(235,28,35)" fg:x="109" fg:w="2"/><text x="88.1532%" y="879.50"></text></g><g><title>monoio::driver::op::Op&lt;T&gt;::submit_with (2 samples, 1.61%)</title><rect x="87.9032%" y="853" width="1.6129%" height="15" fill="rgb(210,56,17)" fg:x="109" fg:w="2"/><text x="88.1532%" y="863.50"></text></g><g><title>monoio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (2 samples, 1.61%)</title><rect x="87.9032%" y="837" width="1.6129%" height="15" fill="rgb(224,130,29)" fg:x="109" fg:w="2"/><text x="88.1532%" y="847.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 1.61%)</title><rect x="87.9032%" y="821" width="1.6129%" height="15" fill="rgb(235,212,8)" fg:x="109" fg:w="2"/><text x="88.1532%" y="831.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 1.61%)</title><rect x="87.9032%" y="805" width="1.6129%" height="15" fill="rgb(223,33,50)" fg:x="109" fg:w="2"/><text x="88.1532%" y="815.50"></text></g><g><title>monoio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf::{{closure}} (1 samples, 0.81%)</title><rect x="88.7097%" y="789" width="0.8065%" height="15" fill="rgb(219,149,13)" fg:x="110" fg:w="1"/><text x="88.9597%" y="799.50"></text></g><g><title>&lt;A as monoio::io::async_write_rent_ext::AsyncWriteRentExt&gt;::write_all::{{closure}} (1 samples, 0.81%)</title><rect x="88.7097%" y="773" width="0.8065%" height="15" fill="rgb(250,156,29)" fg:x="110" fg:w="1"/><text x="88.9597%" y="783.50"></text></g><g><title>&lt;monoio::io::util::split::OwnedWriteHalf&lt;Inner&gt; as monoio::io::async_write_rent::AsyncWriteRent&gt;::write (1 samples, 0.81%)</title><rect x="88.7097%" y="757" width="0.8065%" height="15" fill="rgb(216,193,19)" fg:x="110" fg:w="1"/><text x="88.9597%" y="767.50"></text></g><g><title>&lt;monoio::net::tcp::stream::TcpStream as monoio::io::async_write_rent::AsyncWriteRent&gt;::write (1 samples, 0.81%)</title><rect x="88.7097%" y="741" width="0.8065%" height="15" fill="rgb(216,135,14)" fg:x="110" fg:w="1"/><text x="88.9597%" y="751.50"></text></g><g><title>monoio::driver::op::send::&lt;impl monoio::driver::op::Op&lt;monoio::driver::op::send::Send&lt;T&gt;&gt;&gt;::send (1 samples, 0.81%)</title><rect x="88.7097%" y="725" width="0.8065%" height="15" fill="rgb(241,47,5)" fg:x="110" fg:w="1"/><text x="88.9597%" y="735.50"></text></g><g><title>monoio::driver::op::Op&lt;T&gt;::submit_with (1 samples, 0.81%)</title><rect x="88.7097%" y="709" width="0.8065%" height="15" fill="rgb(233,42,35)" fg:x="110" fg:w="1"/><text x="88.9597%" y="719.50"></text></g><g><title>monoio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (1 samples, 0.81%)</title><rect x="88.7097%" y="693" width="0.8065%" height="15" fill="rgb(231,13,6)" fg:x="110" fg:w="1"/><text x="88.9597%" y="703.50"></text></g><g><title>monoio::driver::op::Op&lt;T&gt;::submit_with::{{closure}} (1 samples, 0.81%)</title><rect x="88.7097%" y="677" width="0.8065%" height="15" fill="rgb(207,181,40)" fg:x="110" fg:w="1"/><text x="88.9597%" y="687.50"></text></g><g><title>monoio::driver::Inner::submit_with (1 samples, 0.81%)</title><rect x="88.7097%" y="661" width="0.8065%" height="15" fill="rgb(254,173,49)" fg:x="110" fg:w="1"/><text x="88.9597%" y="671.50"></text></g><g><title>monoio::driver::uring::UringInner::submit_with_data (1 samples, 0.81%)</title><rect x="88.7097%" y="645" width="0.8065%" height="15" fill="rgb(221,1,38)" fg:x="110" fg:w="1"/><text x="88.9597%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;io_uring::squeue::SubmissionQueue&gt; (1 samples, 0.81%)</title><rect x="88.7097%" y="629" width="0.8065%" height="15" fill="rgb(206,124,46)" fg:x="110" fg:w="1"/><text x="88.9597%" y="639.50"></text></g><g><title>&lt;io_uring::squeue::SubmissionQueue&lt;E&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.81%)</title><rect x="88.7097%" y="613" width="0.8065%" height="15" fill="rgb(249,21,11)" fg:x="110" fg:w="1"/><text x="88.9597%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicU32::store (1 samples, 0.81%)</title><rect x="88.7097%" y="597" width="0.8065%" height="15" fill="rgb(222,201,40)" fg:x="110" fg:w="1"/><text x="88.9597%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_store (1 samples, 0.81%)</title><rect x="88.7097%" y="581" width="0.8065%" height="15" fill="rgb(235,61,29)" fg:x="110" fg:w="1"/><text x="88.9597%" y="591.50"></text></g><g><title>el0t_64_irq (1 samples, 0.81%)</title><rect x="88.7097%" y="565" width="0.8065%" height="15" fill="rgb(219,207,3)" fg:x="110" fg:w="1"/><text x="88.9597%" y="575.50"></text></g><g><title>el0t_64_irq_handler (1 samples, 0.81%)</title><rect x="88.7097%" y="549" width="0.8065%" height="15" fill="rgb(222,56,46)" fg:x="110" fg:w="1"/><text x="88.9597%" y="559.50"></text></g><g><title>__el0_irq_handler_common (1 samples, 0.81%)</title><rect x="88.7097%" y="533" width="0.8065%" height="15" fill="rgb(239,76,54)" fg:x="110" fg:w="1"/><text x="88.9597%" y="543.50"></text></g><g><title>el0_interrupt (1 samples, 0.81%)</title><rect x="88.7097%" y="517" width="0.8065%" height="15" fill="rgb(231,124,27)" fg:x="110" fg:w="1"/><text x="88.9597%" y="527.50"></text></g><g><title>do_notify_resume (1 samples, 0.81%)</title><rect x="88.7097%" y="501" width="0.8065%" height="15" fill="rgb(249,195,6)" fg:x="110" fg:w="1"/><text x="88.9597%" y="511.50"></text></g><g><title>monoio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf::{{closure}} (3 samples, 2.42%)</title><rect x="87.9032%" y="933" width="2.4194%" height="15" fill="rgb(237,174,47)" fg:x="109" fg:w="3"/><text x="88.1532%" y="943.50">mo..</text></g><g><title>&lt;A as monoio::io::async_write_rent_ext::AsyncWriteRentExt&gt;::write_all::{{closure}} (3 samples, 2.42%)</title><rect x="87.9032%" y="917" width="2.4194%" height="15" fill="rgb(206,201,31)" fg:x="109" fg:w="3"/><text x="88.1532%" y="927.50">&lt;A..</text></g><g><title>monoio::driver::op::send::&lt;impl monoio::driver::op::Op&lt;monoio::driver::op::send::Send&lt;T&gt;&gt;&gt;::write::{{closure}} (1 samples, 0.81%)</title><rect x="89.5161%" y="901" width="0.8065%" height="15" fill="rgb(231,57,52)" fg:x="111" fg:w="1"/><text x="89.7661%" y="911.50"></text></g><g><title>&lt;monoio::driver::op::Op&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.81%)</title><rect x="89.5161%" y="885" width="0.8065%" height="15" fill="rgb(248,177,22)" fg:x="111" fg:w="1"/><text x="89.7661%" y="895.50"></text></g><g><title>monoio::driver::Inner::poll_op (1 samples, 0.81%)</title><rect x="89.5161%" y="869" width="0.8065%" height="15" fill="rgb(215,211,37)" fg:x="111" fg:w="1"/><text x="89.7661%" y="879.50"></text></g><g><title>monoio::driver::uring::UringInner::poll_op (1 samples, 0.81%)</title><rect x="89.5161%" y="853" width="0.8065%" height="15" fill="rgb(241,128,51)" fg:x="111" fg:w="1"/><text x="89.7661%" y="863.50"></text></g><g><title>monoio::utils::slab::Slab&lt;T&gt;::get (1 samples, 0.81%)</title><rect x="89.5161%" y="837" width="0.8065%" height="15" fill="rgb(227,165,31)" fg:x="111" fg:w="1"/><text x="89.7661%" y="847.50"></text></g><g><title>roster::application::server::connection::Connection::new (1 samples, 0.81%)</title><rect x="90.3226%" y="789" width="0.8065%" height="15" fill="rgb(228,167,24)" fg:x="112" fg:w="1"/><text x="90.5726%" y="799.50"></text></g><g><title>monoio::io::util::buf_reader::BufReader&lt;R&gt;::new (1 samples, 0.81%)</title><rect x="90.3226%" y="773" width="0.8065%" height="15" fill="rgb(228,143,12)" fg:x="112" fg:w="1"/><text x="90.5726%" y="783.50"></text></g><g><title>monoio::io::util::buf_reader::BufReader&lt;R&gt;::with_capacity (1 samples, 0.81%)</title><rect x="90.3226%" y="757" width="0.8065%" height="15" fill="rgb(249,149,8)" fg:x="112" fg:w="1"/><text x="90.5726%" y="767.50"></text></g><g><title>alloc::vec::from_elem (1 samples, 0.81%)</title><rect x="90.3226%" y="741" width="0.8065%" height="15" fill="rgb(243,35,44)" fg:x="112" fg:w="1"/><text x="90.5726%" y="751.50"></text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1 samples, 0.81%)</title><rect x="90.3226%" y="725" width="0.8065%" height="15" fill="rgb(246,89,9)" fg:x="112" fg:w="1"/><text x="90.5726%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (1 samples, 0.81%)</title><rect x="90.3226%" y="709" width="0.8065%" height="15" fill="rgb(233,213,13)" fg:x="112" fg:w="1"/><text x="90.5726%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.81%)</title><rect x="90.3226%" y="693" width="0.8065%" height="15" fill="rgb(233,141,41)" fg:x="112" fg:w="1"/><text x="90.5726%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (1 samples, 0.81%)</title><rect x="90.3226%" y="677" width="0.8065%" height="15" fill="rgb(239,167,4)" fg:x="112" fg:w="1"/><text x="90.5726%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.81%)</title><rect x="90.3226%" y="661" width="0.8065%" height="15" fill="rgb(209,217,16)" fg:x="112" fg:w="1"/><text x="90.5726%" y="671.50"></text></g><g><title>alloc::alloc::alloc_zeroed (1 samples, 0.81%)</title><rect x="90.3226%" y="645" width="0.8065%" height="15" fill="rgb(219,88,35)" fg:x="112" fg:w="1"/><text x="90.5726%" y="655.50"></text></g><g><title>monoio::task::raw::poll (1 samples, 0.81%)</title><rect x="90.3226%" y="629" width="0.8065%" height="15" fill="rgb(220,193,23)" fg:x="112" fg:w="1"/><text x="90.5726%" y="639.50"></text></g><g><title>monoio::task::harness::Harness&lt;T,S&gt;::poll (1 samples, 0.81%)</title><rect x="90.3226%" y="613" width="0.8065%" height="15" fill="rgb(230,90,52)" fg:x="112" fg:w="1"/><text x="90.5726%" y="623.50"></text></g><g><title>monoio::task::harness::Harness&lt;T,S&gt;::poll_inner (1 samples, 0.81%)</title><rect x="90.3226%" y="597" width="0.8065%" height="15" fill="rgb(252,106,19)" fg:x="112" fg:w="1"/><text x="90.5726%" y="607.50"></text></g><g><title>monoio::task::harness::poll_future (1 samples, 0.81%)</title><rect x="90.3226%" y="581" width="0.8065%" height="15" fill="rgb(206,74,20)" fg:x="112" fg:w="1"/><text x="90.5726%" y="591.50"></text></g><g><title>monoio::task::core::CoreStage&lt;T&gt;::poll (1 samples, 0.81%)</title><rect x="90.3226%" y="565" width="0.8065%" height="15" fill="rgb(230,138,44)" fg:x="112" fg:w="1"/><text x="90.5726%" y="575.50"></text></g><g><title>monoio::task::core::CoreStage&lt;T&gt;::with_mut (1 samples, 0.81%)</title><rect x="90.3226%" y="549" width="0.8065%" height="15" fill="rgb(235,182,43)" fg:x="112" fg:w="1"/><text x="90.5726%" y="559.50"></text></g><g><title>&lt;core::cell::UnsafeCell&lt;T&gt; as monoio::task::utils::UnsafeCellExt&lt;T&gt;&gt;::with_mut (1 samples, 0.81%)</title><rect x="90.3226%" y="533" width="0.8065%" height="15" fill="rgb(242,16,51)" fg:x="112" fg:w="1"/><text x="90.5726%" y="543.50"></text></g><g><title>monoio::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (1 samples, 0.81%)</title><rect x="90.3226%" y="517" width="0.8065%" height="15" fill="rgb(248,9,4)" fg:x="112" fg:w="1"/><text x="90.5726%" y="527.50"></text></g><g><title>roster::application::server::ServerConfig::initialize::{{closure}}::{{closure}}::{{closure}} (1 samples, 0.81%)</title><rect x="90.3226%" y="501" width="0.8065%" height="15" fill="rgb(210,31,22)" fg:x="112" fg:w="1"/><text x="90.5726%" y="511.50"></text></g><g><title>roster::application::server::connection::Connection::new (1 samples, 0.81%)</title><rect x="90.3226%" y="485" width="0.8065%" height="15" fill="rgb(239,54,39)" fg:x="112" fg:w="1"/><text x="90.5726%" y="495.50"></text></g><g><title>monoio::io::util::buf_reader::BufReader&lt;R&gt;::new (1 samples, 0.81%)</title><rect x="90.3226%" y="469" width="0.8065%" height="15" fill="rgb(230,99,41)" fg:x="112" fg:w="1"/><text x="90.5726%" y="479.50"></text></g><g><title>monoio::io::util::buf_reader::BufReader&lt;R&gt;::with_capacity (1 samples, 0.81%)</title><rect x="90.3226%" y="453" width="0.8065%" height="15" fill="rgb(253,106,12)" fg:x="112" fg:w="1"/><text x="90.5726%" y="463.50"></text></g><g><title>alloc::vec::from_elem (1 samples, 0.81%)</title><rect x="90.3226%" y="437" width="0.8065%" height="15" fill="rgb(213,46,41)" fg:x="112" fg:w="1"/><text x="90.5726%" y="447.50"></text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1 samples, 0.81%)</title><rect x="90.3226%" y="421" width="0.8065%" height="15" fill="rgb(215,133,35)" fg:x="112" fg:w="1"/><text x="90.5726%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (1 samples, 0.81%)</title><rect x="90.3226%" y="405" width="0.8065%" height="15" fill="rgb(213,28,5)" fg:x="112" fg:w="1"/><text x="90.5726%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.81%)</title><rect x="90.3226%" y="389" width="0.8065%" height="15" fill="rgb(215,77,49)" fg:x="112" fg:w="1"/><text x="90.5726%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (1 samples, 0.81%)</title><rect x="90.3226%" y="373" width="0.8065%" height="15" fill="rgb(248,100,22)" fg:x="112" fg:w="1"/><text x="90.5726%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.81%)</title><rect x="90.3226%" y="357" width="0.8065%" height="15" fill="rgb(208,67,9)" fg:x="112" fg:w="1"/><text x="90.5726%" y="367.50"></text></g><g><title>alloc::alloc::alloc_zeroed (1 samples, 0.81%)</title><rect x="90.3226%" y="341" width="0.8065%" height="15" fill="rgb(219,133,21)" fg:x="112" fg:w="1"/><text x="90.5726%" y="351.50"></text></g><g><title>__libc_calloc (1 samples, 0.81%)</title><rect x="90.3226%" y="325" width="0.8065%" height="15" fill="rgb(246,46,29)" fg:x="112" fg:w="1"/><text x="90.5726%" y="335.50"></text></g><g><title>[libc.so.6] (1 samples, 0.81%)</title><rect x="90.3226%" y="309" width="0.8065%" height="15" fill="rgb(246,185,52)" fg:x="112" fg:w="1"/><text x="90.5726%" y="319.50"></text></g><g><title>[libc.so.6] (1 samples, 0.81%)</title><rect x="90.3226%" y="293" width="0.8065%" height="15" fill="rgb(252,136,11)" fg:x="112" fg:w="1"/><text x="90.5726%" y="303.50"></text></g><g><title>mprotect (1 samples, 0.81%)</title><rect x="90.3226%" y="277" width="0.8065%" height="15" fill="rgb(219,138,53)" fg:x="112" fg:w="1"/><text x="90.5726%" y="287.50"></text></g><g><title>el0t_64_sync (1 samples, 0.81%)</title><rect x="90.3226%" y="261" width="0.8065%" height="15" fill="rgb(211,51,23)" fg:x="112" fg:w="1"/><text x="90.5726%" y="271.50"></text></g><g><title>el0t_64_sync_handler (1 samples, 0.81%)</title><rect x="90.3226%" y="245" width="0.8065%" height="15" fill="rgb(247,221,28)" fg:x="112" fg:w="1"/><text x="90.5726%" y="255.50"></text></g><g><title>el0_svc (1 samples, 0.81%)</title><rect x="90.3226%" y="229" width="0.8065%" height="15" fill="rgb(251,222,45)" fg:x="112" fg:w="1"/><text x="90.5726%" y="239.50"></text></g><g><title>do_el0_svc (1 samples, 0.81%)</title><rect x="90.3226%" y="213" width="0.8065%" height="15" fill="rgb(217,162,53)" fg:x="112" fg:w="1"/><text x="90.5726%" y="223.50"></text></g><g><title>el0_svc_common.constprop.0 (1 samples, 0.81%)</title><rect x="90.3226%" y="197" width="0.8065%" height="15" fill="rgb(229,93,14)" fg:x="112" fg:w="1"/><text x="90.5726%" y="207.50"></text></g><g><title>invoke_syscall (1 samples, 0.81%)</title><rect x="90.3226%" y="181" width="0.8065%" height="15" fill="rgb(209,67,49)" fg:x="112" fg:w="1"/><text x="90.5726%" y="191.50"></text></g><g><title>__arm64_sys_mprotect (1 samples, 0.81%)</title><rect x="90.3226%" y="165" width="0.8065%" height="15" fill="rgb(213,87,29)" fg:x="112" fg:w="1"/><text x="90.5726%" y="175.50"></text></g><g><title>do_mprotect_pkey.constprop.0 (1 samples, 0.81%)</title><rect x="90.3226%" y="149" width="0.8065%" height="15" fill="rgb(205,151,52)" fg:x="112" fg:w="1"/><text x="90.5726%" y="159.50"></text></g><g><title>mprotect_fixup (1 samples, 0.81%)</title><rect x="90.3226%" y="133" width="0.8065%" height="15" fill="rgb(253,215,39)" fg:x="112" fg:w="1"/><text x="90.5726%" y="143.50"></text></g><g><title>perf_event_mmap (1 samples, 0.81%)</title><rect x="90.3226%" y="117" width="0.8065%" height="15" fill="rgb(221,220,41)" fg:x="112" fg:w="1"/><text x="90.5726%" y="127.50"></text></g><g><title>perf_event_mmap_event (1 samples, 0.81%)</title><rect x="90.3226%" y="101" width="0.8065%" height="15" fill="rgb(218,133,21)" fg:x="112" fg:w="1"/><text x="90.5726%" y="111.50"></text></g><g><title>perf_iterate_sb (1 samples, 0.81%)</title><rect x="90.3226%" y="85" width="0.8065%" height="15" fill="rgb(221,193,43)" fg:x="112" fg:w="1"/><text x="90.5726%" y="95.50"></text></g><g><title>perf_iterate_ctx (1 samples, 0.81%)</title><rect x="90.3226%" y="69" width="0.8065%" height="15" fill="rgb(240,128,52)" fg:x="112" fg:w="1"/><text x="90.5726%" y="79.50"></text></g><g><title>perf_event_mmap_output (1 samples, 0.81%)</title><rect x="90.3226%" y="53" width="0.8065%" height="15" fill="rgb(253,114,12)" fg:x="112" fg:w="1"/><text x="90.5726%" y="63.50"></text></g><g><title>memmove (1 samples, 0.81%)</title><rect x="90.3226%" y="37" width="0.8065%" height="15" fill="rgb(215,223,47)" fg:x="112" fg:w="1"/><text x="90.5726%" y="47.50"></text></g><g><title>monoio::task::harness::poll_future (3 samples, 2.42%)</title><rect x="90.3226%" y="885" width="2.4194%" height="15" fill="rgb(248,225,23)" fg:x="112" fg:w="3"/><text x="90.5726%" y="895.50">mo..</text></g><g><title>monoio::task::core::CoreStage&lt;T&gt;::poll (3 samples, 2.42%)</title><rect x="90.3226%" y="869" width="2.4194%" height="15" fill="rgb(250,108,0)" fg:x="112" fg:w="3"/><text x="90.5726%" y="879.50">mo..</text></g><g><title>monoio::task::core::CoreStage&lt;T&gt;::with_mut (3 samples, 2.42%)</title><rect x="90.3226%" y="853" width="2.4194%" height="15" fill="rgb(228,208,7)" fg:x="112" fg:w="3"/><text x="90.5726%" y="863.50">mo..</text></g><g><title>&lt;core::cell::UnsafeCell&lt;T&gt; as monoio::task::utils::UnsafeCellExt&lt;T&gt;&gt;::with_mut (3 samples, 2.42%)</title><rect x="90.3226%" y="837" width="2.4194%" height="15" fill="rgb(244,45,10)" fg:x="112" fg:w="3"/><text x="90.5726%" y="847.50">&lt;c..</text></g><g><title>monoio::task::core::CoreStage&lt;T&gt;::poll::{{closure}} (3 samples, 2.42%)</title><rect x="90.3226%" y="821" width="2.4194%" height="15" fill="rgb(207,125,25)" fg:x="112" fg:w="3"/><text x="90.5726%" y="831.50">mo..</text></g><g><title>roster::application::server::ServerConfig::initialize::{{closure}}::{{closure}}::{{closure}} (3 samples, 2.42%)</title><rect x="90.3226%" y="805" width="2.4194%" height="15" fill="rgb(210,195,18)" fg:x="112" fg:w="3"/><text x="90.5726%" y="815.50">ro..</text></g><g><title>roster::application::server::handle::Handler::run::{{closure}} (2 samples, 1.61%)</title><rect x="91.1290%" y="789" width="1.6129%" height="15" fill="rgb(249,80,12)" fg:x="113" fg:w="2"/><text x="91.3790%" y="799.50"></text></g><g><title>roster::application::server::connection::Connection::read_frame::{{closure}} (1 samples, 0.81%)</title><rect x="91.9355%" y="773" width="0.8065%" height="15" fill="rgb(221,65,9)" fg:x="114" fg:w="1"/><text x="92.1855%" y="783.50"></text></g><g><title>&lt;monoio::io::util::buf_reader::BufReader&lt;R&gt; as monoio::io::async_read_rent::AsyncReadRent&gt;::read::{{closure}} (1 samples, 0.81%)</title><rect x="91.9355%" y="757" width="0.8065%" height="15" fill="rgb(235,49,36)" fg:x="114" fg:w="1"/><text x="92.1855%" y="767.50"></text></g><g><title>&lt;monoio::io::util::buf_reader::BufReader&lt;R&gt; as monoio::io::async_buf_read::AsyncBufRead&gt;::fill_buf::{{closure}} (1 samples, 0.81%)</title><rect x="91.9355%" y="741" width="0.8065%" height="15" fill="rgb(225,32,20)" fg:x="114" fg:w="1"/><text x="92.1855%" y="751.50"></text></g><g><title>monoio::task::raw::poll (4 samples, 3.23%)</title><rect x="90.3226%" y="933" width="3.2258%" height="15" fill="rgb(215,141,46)" fg:x="112" fg:w="4"/><text x="90.5726%" y="943.50">mon..</text></g><g><title>monoio::task::harness::Harness&lt;T,S&gt;::poll (4 samples, 3.23%)</title><rect x="90.3226%" y="917" width="3.2258%" height="15" fill="rgb(250,160,47)" fg:x="112" fg:w="4"/><text x="90.5726%" y="927.50">mon..</text></g><g><title>monoio::task::harness::Harness&lt;T,S&gt;::poll_inner (4 samples, 3.23%)</title><rect x="90.3226%" y="901" width="3.2258%" height="15" fill="rgb(216,222,40)" fg:x="112" fg:w="4"/><text x="90.5726%" y="911.50">mon..</text></g><g><title>monoio::task::state::State::transition_to_running (1 samples, 0.81%)</title><rect x="92.7419%" y="885" width="0.8065%" height="15" fill="rgb(234,217,39)" fg:x="115" fg:w="1"/><text x="92.9919%" y="895.50"></text></g><g><title>monoio::task::state::State::fetch_update_action (1 samples, 0.81%)</title><rect x="92.7419%" y="869" width="0.8065%" height="15" fill="rgb(207,178,40)" fg:x="115" fg:w="1"/><text x="92.9919%" y="879.50"></text></g><g><title>monoio::task::state::State::transition_to_running::{{closure}} (1 samples, 0.81%)</title><rect x="92.7419%" y="853" width="0.8065%" height="15" fill="rgb(221,136,13)" fg:x="115" fg:w="1"/><text x="92.9919%" y="863.50"></text></g><g><title>monoio::task::state::Snapshot::unset_notified (1 samples, 0.81%)</title><rect x="92.7419%" y="837" width="0.8065%" height="15" fill="rgb(249,199,10)" fg:x="115" fg:w="1"/><text x="92.9919%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.81%)</title><rect x="93.5484%" y="917" width="0.8065%" height="15" fill="rgb(249,222,13)" fg:x="116" fg:w="1"/><text x="93.7984%" y="927.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.81%)</title><rect x="93.5484%" y="901" width="0.8065%" height="15" fill="rgb(244,185,38)" fg:x="116" fg:w="1"/><text x="93.7984%" y="911.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.81%)</title><rect x="93.5484%" y="885" width="0.8065%" height="15" fill="rgb(236,202,9)" fg:x="116" fg:w="1"/><text x="93.7984%" y="895.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.81%)</title><rect x="93.5484%" y="869" width="0.8065%" height="15" fill="rgb(250,229,37)" fg:x="116" fg:w="1"/><text x="93.7984%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.81%)</title><rect x="93.5484%" y="853" width="0.8065%" height="15" fill="rgb(206,174,23)" fg:x="116" fg:w="1"/><text x="93.7984%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.81%)</title><rect x="93.5484%" y="837" width="0.8065%" height="15" fill="rgb(211,33,43)" fg:x="116" fg:w="1"/><text x="93.7984%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.81%)</title><rect x="93.5484%" y="821" width="0.8065%" height="15" fill="rgb(245,58,50)" fg:x="116" fg:w="1"/><text x="93.7984%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.81%)</title><rect x="93.5484%" y="805" width="0.8065%" height="15" fill="rgb(244,68,36)" fg:x="116" fg:w="1"/><text x="93.7984%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.81%)</title><rect x="93.5484%" y="789" width="0.8065%" height="15" fill="rgb(232,229,15)" fg:x="116" fg:w="1"/><text x="93.7984%" y="799.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.81%)</title><rect x="93.5484%" y="773" width="0.8065%" height="15" fill="rgb(254,30,23)" fg:x="116" fg:w="1"/><text x="93.7984%" y="783.50"></text></g><g><title>roster::application::server::cmd::parse::Parse::next_string (1 samples, 0.81%)</title><rect x="93.5484%" y="757" width="0.8065%" height="15" fill="rgb(235,160,14)" fg:x="116" fg:w="1"/><text x="93.7984%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.81%)</title><rect x="93.5484%" y="741" width="0.8065%" height="15" fill="rgb(212,155,44)" fg:x="116" fg:w="1"/><text x="93.7984%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.81%)</title><rect x="93.5484%" y="725" width="0.8065%" height="15" fill="rgb(226,2,50)" fg:x="116" fg:w="1"/><text x="93.7984%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.81%)</title><rect x="93.5484%" y="709" width="0.8065%" height="15" fill="rgb(234,177,6)" fg:x="116" fg:w="1"/><text x="93.7984%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.81%)</title><rect x="93.5484%" y="693" width="0.8065%" height="15" fill="rgb(217,24,9)" fg:x="116" fg:w="1"/><text x="93.7984%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.81%)</title><rect x="93.5484%" y="677" width="0.8065%" height="15" fill="rgb(220,13,46)" fg:x="116" fg:w="1"/><text x="93.7984%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.81%)</title><rect x="93.5484%" y="661" width="0.8065%" height="15" fill="rgb(239,221,27)" fg:x="116" fg:w="1"/><text x="93.7984%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.81%)</title><rect x="93.5484%" y="645" width="0.8065%" height="15" fill="rgb(222,198,25)" fg:x="116" fg:w="1"/><text x="93.7984%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.81%)</title><rect x="93.5484%" y="629" width="0.8065%" height="15" fill="rgb(211,99,13)" fg:x="116" fg:w="1"/><text x="93.7984%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.81%)</title><rect x="93.5484%" y="613" width="0.8065%" height="15" fill="rgb(232,111,31)" fg:x="116" fg:w="1"/><text x="93.7984%" y="623.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.81%)</title><rect x="93.5484%" y="597" width="0.8065%" height="15" fill="rgb(245,82,37)" fg:x="116" fg:w="1"/><text x="93.7984%" y="607.50"></text></g><g><title>malloc (1 samples, 0.81%)</title><rect x="93.5484%" y="581" width="0.8065%" height="15" fill="rgb(227,149,46)" fg:x="116" fg:w="1"/><text x="93.7984%" y="591.50"></text></g><g><title>roster::application::server::cmd::parse::Parse::next_string (2 samples, 1.61%)</title><rect x="93.5484%" y="933" width="1.6129%" height="15" fill="rgb(218,36,50)" fg:x="116" fg:w="2"/><text x="93.7984%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (1 samples, 0.81%)</title><rect x="94.3548%" y="917" width="0.8065%" height="15" fill="rgb(226,80,48)" fg:x="117" fg:w="1"/><text x="94.6048%" y="927.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (1 samples, 0.81%)</title><rect x="94.3548%" y="901" width="0.8065%" height="15" fill="rgb(238,224,15)" fg:x="117" fg:w="1"/><text x="94.6048%" y="911.50"></text></g><g><title>bytes::bytes::promotable_even_drop (1 samples, 0.81%)</title><rect x="94.3548%" y="885" width="0.8065%" height="15" fill="rgb(241,136,10)" fg:x="117" fg:w="1"/><text x="94.6048%" y="895.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (1 samples, 0.81%)</title><rect x="94.3548%" y="869" width="0.8065%" height="15" fill="rgb(208,32,45)" fg:x="117" fg:w="1"/><text x="94.6048%" y="879.50"></text></g><g><title>bytes::bytes::promotable_even_drop::{{closure}} (1 samples, 0.81%)</title><rect x="94.3548%" y="853" width="0.8065%" height="15" fill="rgb(207,135,9)" fg:x="117" fg:w="1"/><text x="94.6048%" y="863.50"></text></g><g><title>bytes::bytes::ptr_map (1 samples, 0.81%)</title><rect x="94.3548%" y="837" width="0.8065%" height="15" fill="rgb(206,86,44)" fg:x="117" fg:w="1"/><text x="94.6048%" y="847.50"></text></g><g><title>bytes::bytes::promotable_even_drop::{{closure}}::{{closure}} (1 samples, 0.81%)</title><rect x="94.3548%" y="821" width="0.8065%" height="15" fill="rgb(245,177,15)" fg:x="117" fg:w="1"/><text x="94.6048%" y="831.50"></text></g><g><title>roster::application::server::connection::Connection::write_frame::{{closure}} (1 samples, 0.81%)</title><rect x="95.1613%" y="933" width="0.8065%" height="15" fill="rgb(206,64,50)" fg:x="118" fg:w="1"/><text x="95.4113%" y="943.50"></text></g><g><title>roster::application::server::connection::Connection::write_value::{{closure}} (1 samples, 0.81%)</title><rect x="95.1613%" y="917" width="0.8065%" height="15" fill="rgb(234,36,40)" fg:x="118" fg:w="1"/><text x="95.4113%" y="927.50"></text></g><g><title>&lt;A as monoio::io::async_write_rent_ext::AsyncWriteRentExt&gt;::write_all::{{closure}} (1 samples, 0.81%)</title><rect x="95.1613%" y="901" width="0.8065%" height="15" fill="rgb(213,64,8)" fg:x="118" fg:w="1"/><text x="95.4113%" y="911.50"></text></g><g><title>&lt;monoio::io::util::buf_writer::BufWriter&lt;W&gt; as monoio::io::async_write_rent::AsyncWriteRent&gt;::write::{{closure}} (1 samples, 0.81%)</title><rect x="95.1613%" y="885" width="0.8065%" height="15" fill="rgb(210,75,36)" fg:x="118" fg:w="1"/><text x="95.4113%" y="895.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (1 samples, 0.81%)</title><rect x="95.1613%" y="869" width="0.8065%" height="15" fill="rgb(229,88,21)" fg:x="118" fg:w="1"/><text x="95.4113%" y="879.50"></text></g><g><title>roster::application::server::frame::Frame::check (1 samples, 0.81%)</title><rect x="95.9677%" y="933" width="0.8065%" height="15" fill="rgb(252,204,47)" fg:x="119" fg:w="1"/><text x="96.2177%" y="943.50"></text></g><g><title>roster::application::server::frame::skip (1 samples, 0.81%)</title><rect x="95.9677%" y="917" width="0.8065%" height="15" fill="rgb(208,77,27)" fg:x="119" fg:w="1"/><text x="96.2177%" y="927.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_impl::Buf&gt;::remaining (1 samples, 0.81%)</title><rect x="95.9677%" y="901" width="0.8065%" height="15" fill="rgb(221,76,26)" fg:x="119" fg:w="1"/><text x="96.2177%" y="911.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;T&gt; as bytes::buf::buf_impl::Buf&gt;::remaining (1 samples, 0.81%)</title><rect x="95.9677%" y="885" width="0.8065%" height="15" fill="rgb(225,139,18)" fg:x="119" fg:w="1"/><text x="96.2177%" y="895.50"></text></g><g><title>monoio::driver::op::Op&lt;T&gt;::submit_with::{{closure}} (1 samples, 0.81%)</title><rect x="96.7742%" y="789" width="0.8065%" height="15" fill="rgb(230,137,11)" fg:x="120" fg:w="1"/><text x="97.0242%" y="799.50"></text></g><g><title>monoio::driver::Inner::submit_with (1 samples, 0.81%)</title><rect x="96.7742%" y="773" width="0.8065%" height="15" fill="rgb(212,28,1)" fg:x="120" fg:w="1"/><text x="97.0242%" y="783.50"></text></g><g><title>monoio::driver::uring::UringInner::submit_with_data (1 samples, 0.81%)</title><rect x="96.7742%" y="757" width="0.8065%" height="15" fill="rgb(248,164,17)" fg:x="120" fg:w="1"/><text x="97.0242%" y="767.50"></text></g><g><title>monoio::driver::uring::UringInner::new_op (1 samples, 0.81%)</title><rect x="96.7742%" y="741" width="0.8065%" height="15" fill="rgb(222,171,42)" fg:x="120" fg:w="1"/><text x="97.0242%" y="751.50"></text></g><g><title>monoio::driver::uring::Ops::insert (1 samples, 0.81%)</title><rect x="96.7742%" y="725" width="0.8065%" height="15" fill="rgb(243,84,45)" fg:x="120" fg:w="1"/><text x="97.0242%" y="735.50"></text></g><g><title>monoio::utils::slab::Slab&lt;T&gt;::insert (1 samples, 0.81%)</title><rect x="96.7742%" y="709" width="0.8065%" height="15" fill="rgb(252,49,23)" fg:x="120" fg:w="1"/><text x="97.0242%" y="719.50"></text></g><g><title>roster::application::server::handle::Handler::run::{{closure}} (2 samples, 1.61%)</title><rect x="96.7742%" y="933" width="1.6129%" height="15" fill="rgb(215,19,7)" fg:x="120" fg:w="2"/><text x="97.0242%" y="943.50"></text></g><g><title>roster::application::server::connection::Connection::read_frame::{{closure}} (2 samples, 1.61%)</title><rect x="96.7742%" y="917" width="1.6129%" height="15" fill="rgb(238,81,41)" fg:x="120" fg:w="2"/><text x="97.0242%" y="927.50"></text></g><g><title>&lt;monoio::io::util::buf_reader::BufReader&lt;R&gt; as monoio::io::async_read_rent::AsyncReadRent&gt;::read::{{closure}} (2 samples, 1.61%)</title><rect x="96.7742%" y="901" width="1.6129%" height="15" fill="rgb(210,199,37)" fg:x="120" fg:w="2"/><text x="97.0242%" y="911.50"></text></g><g><title>&lt;monoio::io::util::buf_reader::BufReader&lt;R&gt; as monoio::io::async_buf_read::AsyncBufRead&gt;::fill_buf::{{closure}} (2 samples, 1.61%)</title><rect x="96.7742%" y="885" width="1.6129%" height="15" fill="rgb(244,192,49)" fg:x="120" fg:w="2"/><text x="97.0242%" y="895.50"></text></g><g><title>&lt;monoio::io::util::split::OwnedReadHalf&lt;Inner&gt; as monoio::io::async_read_rent::AsyncReadRent&gt;::read (2 samples, 1.61%)</title><rect x="96.7742%" y="869" width="1.6129%" height="15" fill="rgb(226,211,11)" fg:x="120" fg:w="2"/><text x="97.0242%" y="879.50"></text></g><g><title>&lt;monoio::net::tcp::stream::TcpStream as monoio::io::async_read_rent::AsyncReadRent&gt;::read (2 samples, 1.61%)</title><rect x="96.7742%" y="853" width="1.6129%" height="15" fill="rgb(236,162,54)" fg:x="120" fg:w="2"/><text x="97.0242%" y="863.50"></text></g><g><title>monoio::driver::op::recv::&lt;impl monoio::driver::op::Op&lt;monoio::driver::op::recv::Recv&lt;T&gt;&gt;&gt;::recv (2 samples, 1.61%)</title><rect x="96.7742%" y="837" width="1.6129%" height="15" fill="rgb(220,229,9)" fg:x="120" fg:w="2"/><text x="97.0242%" y="847.50"></text></g><g><title>monoio::driver::op::Op&lt;T&gt;::submit_with (2 samples, 1.61%)</title><rect x="96.7742%" y="821" width="1.6129%" height="15" fill="rgb(250,87,22)" fg:x="120" fg:w="2"/><text x="97.0242%" y="831.50"></text></g><g><title>monoio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (2 samples, 1.61%)</title><rect x="96.7742%" y="805" width="1.6129%" height="15" fill="rgb(239,43,17)" fg:x="120" fg:w="2"/><text x="97.0242%" y="815.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.81%)</title><rect x="97.5806%" y="789" width="0.8065%" height="15" fill="rgb(231,177,25)" fg:x="121" fg:w="1"/><text x="97.8306%" y="799.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.81%)</title><rect x="97.5806%" y="773" width="0.8065%" height="15" fill="rgb(219,179,1)" fg:x="121" fg:w="1"/><text x="97.8306%" y="783.50"></text></g><g><title>roster::application::server::handle::Handler::run::{{closure}} (1 samples, 0.81%)</title><rect x="97.5806%" y="757" width="0.8065%" height="15" fill="rgb(238,219,53)" fg:x="121" fg:w="1"/><text x="97.8306%" y="767.50"></text></g><g><title>roster::application::server::connection::Connection::read_frame::{{closure}} (1 samples, 0.81%)</title><rect x="97.5806%" y="741" width="0.8065%" height="15" fill="rgb(232,167,36)" fg:x="121" fg:w="1"/><text x="97.8306%" y="751.50"></text></g><g><title>&lt;monoio::io::util::buf_reader::BufReader&lt;R&gt; as monoio::io::async_read_rent::AsyncReadRent&gt;::read::{{closure}} (1 samples, 0.81%)</title><rect x="97.5806%" y="725" width="0.8065%" height="15" fill="rgb(244,19,51)" fg:x="121" fg:w="1"/><text x="97.8306%" y="735.50"></text></g><g><title>&lt;monoio::io::util::buf_reader::BufReader&lt;R&gt; as monoio::io::async_buf_read::AsyncBufRead&gt;::fill_buf::{{closure}} (1 samples, 0.81%)</title><rect x="97.5806%" y="709" width="0.8065%" height="15" fill="rgb(224,6,22)" fg:x="121" fg:w="1"/><text x="97.8306%" y="719.50"></text></g><g><title>&lt;monoio::io::util::split::OwnedReadHalf&lt;Inner&gt; as monoio::io::async_read_rent::AsyncReadRent&gt;::read (1 samples, 0.81%)</title><rect x="97.5806%" y="693" width="0.8065%" height="15" fill="rgb(224,145,5)" fg:x="121" fg:w="1"/><text x="97.8306%" y="703.50"></text></g><g><title>&lt;monoio::net::tcp::stream::TcpStream as monoio::io::async_read_rent::AsyncReadRent&gt;::read (1 samples, 0.81%)</title><rect x="97.5806%" y="677" width="0.8065%" height="15" fill="rgb(234,130,49)" fg:x="121" fg:w="1"/><text x="97.8306%" y="687.50"></text></g><g><title>monoio::driver::op::recv::&lt;impl monoio::driver::op::Op&lt;monoio::driver::op::recv::Recv&lt;T&gt;&gt;&gt;::recv (1 samples, 0.81%)</title><rect x="97.5806%" y="661" width="0.8065%" height="15" fill="rgb(254,6,2)" fg:x="121" fg:w="1"/><text x="97.8306%" y="671.50"></text></g><g><title>monoio::driver::op::Op&lt;T&gt;::submit_with (1 samples, 0.81%)</title><rect x="97.5806%" y="645" width="0.8065%" height="15" fill="rgb(208,96,46)" fg:x="121" fg:w="1"/><text x="97.8306%" y="655.50"></text></g><g><title>monoio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (1 samples, 0.81%)</title><rect x="97.5806%" y="629" width="0.8065%" height="15" fill="rgb(239,3,39)" fg:x="121" fg:w="1"/><text x="97.8306%" y="639.50"></text></g><g><title>monoio::driver::op::Op&lt;T&gt;::submit_with::{{closure}} (1 samples, 0.81%)</title><rect x="97.5806%" y="613" width="0.8065%" height="15" fill="rgb(233,210,1)" fg:x="121" fg:w="1"/><text x="97.8306%" y="623.50"></text></g><g><title>monoio::driver::Inner::submit_with (1 samples, 0.81%)</title><rect x="97.5806%" y="597" width="0.8065%" height="15" fill="rgb(244,137,37)" fg:x="121" fg:w="1"/><text x="97.8306%" y="607.50"></text></g><g><title>monoio::driver::uring::UringInner::submit_with_data (1 samples, 0.81%)</title><rect x="97.5806%" y="581" width="0.8065%" height="15" fill="rgb(240,136,2)" fg:x="121" fg:w="1"/><text x="97.8306%" y="591.50"></text></g><g><title>scc::hash_table::HashTable::relocate_bucket (1 samples, 0.81%)</title><rect x="98.3871%" y="933" width="0.8065%" height="15" fill="rgb(239,18,37)" fg:x="122" fg:w="1"/><text x="98.6371%" y="943.50"></text></g><g><title>scc::hash_table::HashTable::hash (1 samples, 0.81%)</title><rect x="98.3871%" y="917" width="0.8065%" height="15" fill="rgb(218,185,22)" fg:x="122" fg:w="1"/><text x="98.6371%" y="927.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (1 samples, 0.81%)</title><rect x="98.3871%" y="901" width="0.8065%" height="15" fill="rgb(225,218,4)" fg:x="122" fg:w="1"/><text x="98.6371%" y="911.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1 samples, 0.81%)</title><rect x="98.3871%" y="885" width="0.8065%" height="15" fill="rgb(230,182,32)" fg:x="122" fg:w="1"/><text x="98.6371%" y="895.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (1 samples, 0.81%)</title><rect x="98.3871%" y="869" width="0.8065%" height="15" fill="rgb(242,56,43)" fg:x="122" fg:w="1"/><text x="98.6371%" y="879.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1 samples, 0.81%)</title><rect x="98.3871%" y="853" width="0.8065%" height="15" fill="rgb(233,99,24)" fg:x="122" fg:w="1"/><text x="98.6371%" y="863.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1 samples, 0.81%)</title><rect x="98.3871%" y="837" width="0.8065%" height="15" fill="rgb(234,209,42)" fg:x="122" fg:w="1"/><text x="98.6371%" y="847.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.81%)</title><rect x="98.3871%" y="821" width="0.8065%" height="15" fill="rgb(227,7,12)" fg:x="122" fg:w="1"/><text x="98.6371%" y="831.50"></text></g><g><title>scc::hash_table::HashTable::relocate_bucket (1 samples, 0.81%)</title><rect x="98.3871%" y="805" width="0.8065%" height="15" fill="rgb(245,203,43)" fg:x="122" fg:w="1"/><text x="98.6371%" y="815.50"></text></g><g><title>scc::hash_table::HashTable::hash (1 samples, 0.81%)</title><rect x="98.3871%" y="789" width="0.8065%" height="15" fill="rgb(238,205,33)" fg:x="122" fg:w="1"/><text x="98.6371%" y="799.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.81%)</title><rect x="98.3871%" y="773" width="0.8065%" height="15" fill="rgb(231,56,7)" fg:x="122" fg:w="1"/><text x="98.6371%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.81%)</title><rect x="98.3871%" y="757" width="0.8065%" height="15" fill="rgb(244,186,29)" fg:x="122" fg:w="1"/><text x="98.6371%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.81%)</title><rect x="98.3871%" y="741" width="0.8065%" height="15" fill="rgb(234,111,31)" fg:x="122" fg:w="1"/><text x="98.6371%" y="751.50"></text></g><g><title>all (124 samples, 100%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(241,149,10)" fg:x="0" fg:w="124"/><text x="0.2500%" y="975.50"></text></g><g><title>roster (124 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(249,206,44)" fg:x="0" fg:w="124"/><text x="0.2500%" y="959.50">roster</text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.81%)</title><rect x="99.1935%" y="933" width="0.8065%" height="15" fill="rgb(251,153,30)" fg:x="123" fg:w="1"/><text x="99.4435%" y="943.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.81%)</title><rect x="99.1935%" y="917" width="0.8065%" height="15" fill="rgb(239,152,38)" fg:x="123" fg:w="1"/><text x="99.4435%" y="927.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.81%)</title><rect x="99.1935%" y="901" width="0.8065%" height="15" fill="rgb(249,139,47)" fg:x="123" fg:w="1"/><text x="99.4435%" y="911.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.81%)</title><rect x="99.1935%" y="885" width="0.8065%" height="15" fill="rgb(244,64,35)" fg:x="123" fg:w="1"/><text x="99.4435%" y="895.50"></text></g><g><title>statx (1 samples, 0.81%)</title><rect x="99.1935%" y="869" width="0.8065%" height="15" fill="rgb(216,46,15)" fg:x="123" fg:w="1"/><text x="99.4435%" y="879.50"></text></g><g><title>el0t_64_sync (1 samples, 0.81%)</title><rect x="99.1935%" y="853" width="0.8065%" height="15" fill="rgb(250,74,19)" fg:x="123" fg:w="1"/><text x="99.4435%" y="863.50"></text></g><g><title>el0t_64_sync_handler (1 samples, 0.81%)</title><rect x="99.1935%" y="837" width="0.8065%" height="15" fill="rgb(249,42,33)" fg:x="123" fg:w="1"/><text x="99.4435%" y="847.50"></text></g><g><title>el0_svc (1 samples, 0.81%)</title><rect x="99.1935%" y="821" width="0.8065%" height="15" fill="rgb(242,149,17)" fg:x="123" fg:w="1"/><text x="99.4435%" y="831.50"></text></g><g><title>do_el0_svc (1 samples, 0.81%)</title><rect x="99.1935%" y="805" width="0.8065%" height="15" fill="rgb(244,29,21)" fg:x="123" fg:w="1"/><text x="99.4435%" y="815.50"></text></g><g><title>el0_svc_common.constprop.0 (1 samples, 0.81%)</title><rect x="99.1935%" y="789" width="0.8065%" height="15" fill="rgb(220,130,37)" fg:x="123" fg:w="1"/><text x="99.4435%" y="799.50"></text></g><g><title>invoke_syscall (1 samples, 0.81%)</title><rect x="99.1935%" y="773" width="0.8065%" height="15" fill="rgb(211,67,2)" fg:x="123" fg:w="1"/><text x="99.4435%" y="783.50"></text></g><g><title>__arm64_sys_statx (1 samples, 0.81%)</title><rect x="99.1935%" y="757" width="0.8065%" height="15" fill="rgb(235,68,52)" fg:x="123" fg:w="1"/><text x="99.4435%" y="767.50"></text></g><g><title>do_statx (1 samples, 0.81%)</title><rect x="99.1935%" y="741" width="0.8065%" height="15" fill="rgb(246,142,3)" fg:x="123" fg:w="1"/><text x="99.4435%" y="751.50"></text></g><g><title>vfs_statx (1 samples, 0.81%)</title><rect x="99.1935%" y="725" width="0.8065%" height="15" fill="rgb(241,25,7)" fg:x="123" fg:w="1"/><text x="99.4435%" y="735.50"></text></g><g><title>user_path_at_empty (1 samples, 0.81%)</title><rect x="99.1935%" y="709" width="0.8065%" height="15" fill="rgb(242,119,39)" fg:x="123" fg:w="1"/><text x="99.4435%" y="719.50"></text></g><g><title>filename_lookup (1 samples, 0.81%)</title><rect x="99.1935%" y="693" width="0.8065%" height="15" fill="rgb(241,98,45)" fg:x="123" fg:w="1"/><text x="99.4435%" y="703.50"></text></g><g><title>path_lookupat (1 samples, 0.81%)</title><rect x="99.1935%" y="677" width="0.8065%" height="15" fill="rgb(254,28,30)" fg:x="123" fg:w="1"/><text x="99.4435%" y="687.50"></text></g><g><title>walk_component (1 samples, 0.81%)</title><rect x="99.1935%" y="661" width="0.8065%" height="15" fill="rgb(241,142,54)" fg:x="123" fg:w="1"/><text x="99.4435%" y="671.50"></text></g><g><title>__lookup_slow (1 samples, 0.81%)</title><rect x="99.1935%" y="645" width="0.8065%" height="15" fill="rgb(222,85,15)" fg:x="123" fg:w="1"/><text x="99.4435%" y="655.50"></text></g><g><title>fuse_lookup (1 samples, 0.81%)</title><rect x="99.1935%" y="629" width="0.8065%" height="15" fill="rgb(210,85,47)" fg:x="123" fg:w="1"/><text x="99.4435%" y="639.50"></text></g><g><title>fuse_lookup_name (1 samples, 0.81%)</title><rect x="99.1935%" y="613" width="0.8065%" height="15" fill="rgb(224,206,25)" fg:x="123" fg:w="1"/><text x="99.4435%" y="623.50"></text></g><g><title>fuse_simple_request (1 samples, 0.81%)</title><rect x="99.1935%" y="597" width="0.8065%" height="15" fill="rgb(243,201,19)" fg:x="123" fg:w="1"/><text x="99.4435%" y="607.50"></text></g><g><title>queue_request_and_unlock (1 samples, 0.81%)</title><rect x="99.1935%" y="581" width="0.8065%" height="15" fill="rgb(236,59,4)" fg:x="123" fg:w="1"/><text x="99.4435%" y="591.50"></text></g><g><title>virtio_fs_wake_pending_and_unlock (1 samples, 0.81%)</title><rect x="99.1935%" y="565" width="0.8065%" height="15" fill="rgb(254,179,45)" fg:x="123" fg:w="1"/><text x="99.4435%" y="575.50"></text></g><g><title>virtio_fs_enqueue_req (1 samples, 0.81%)</title><rect x="99.1935%" y="549" width="0.8065%" height="15" fill="rgb(226,14,10)" fg:x="123" fg:w="1"/><text x="99.4435%" y="559.50"></text></g><g><title>vp_notify (1 samples, 0.81%)</title><rect x="99.1935%" y="533" width="0.8065%" height="15" fill="rgb(244,27,41)" fg:x="123" fg:w="1"/><text x="99.4435%" y="543.50"></text></g></svg></svg>